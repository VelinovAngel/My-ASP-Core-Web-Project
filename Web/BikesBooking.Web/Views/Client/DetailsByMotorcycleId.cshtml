@using BikesBooking.Services.Data.DTO.Clients
@using Microsoft.AspNetCore.Identity
@using BikesBooking.Data.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@model BookedMotorcycleDto

@{
    this.ViewData["Title"] = "My Motorcycle";
    var user = await UserManager.GetUserAsync(this.User);
    var clientName = $"{user.FirstName} {user.LastName}";
}



<br />
<div class="mt-2 mb-4">
    <div class="row mt-3 mb-3">
        <div class="col-lg-4 col-md-4 col-sm-3">
            <div>
                <img class="motor-img-top img-fluid img-thumbnail" style="width: 400px; height: 250px;" src="@Model.Url" alt="@Model.Manufacturer @Model.Model - @Model.Year (@Model.Type)">
            </div>
            <br />
            <br />
            <div class="row container-fluid">
                <div class="d-inline">
                    <div class="rating">
                        <span class="font-weight-bold"> Rating:</span>
                        <span id="starsForRate1" class="rating__star  fa-star @if (0.5 <= Model.AverageVote) { <text>fa</text>}else{<text>far</text>}" data-vote="1"></span>
                        <span id="starsForRate2" class="rating__star  fa-star @if (1.5 <= Model.AverageVote) { <text>fa</text>}else{<text>far</text>}" data-vote="2"></span>
                        <span id="starsForRate3" class="rating__star  fa-star @if (2.5 <= Model.AverageVote) { <text>fa</text>}else{<text>far</text>}" data-vote="3"></span>
                        <span id="starsForRate4" class="rating__star  fa-star @if (3.5 <= Model.AverageVote) { <text>fa</text>}else{<text>far</text>}" data-vote="4"></span>
                        <span id="starsForRate5" class="rating__star  fa-star @if (4.5 <= Model.AverageVote) { <text>fa</text>}else{<text>far</text>}" data-vote="5"></span>
                        <span id="averageVoteValue">@Model.AverageVote.ToString("0.0")</span><span> / 5</span>
                        <input type="hidden" value="@Model.Id" id='h_v' class='h_v'>
                    </div>
                </div>
            </div>
            <form method="post" id="antiForgeryForm"></form>
            <form method="post" class="mt-3">
                <textarea type="text" class="form-control"></textarea>
                <a asp-controller="Client" asp-action="Rating" asp-route-id="@Model.Id" class="btn btn-block btn-primary mt-4">Feedback</a>
            </form>
        </div>
        <div class="col-lg-7 col-lg-offset-1 col-md-4 col-sm-2">
            <h2 class="text-center ">@Model.Manufacturer @Model.Model</h2>
            <br />
            <p><b>Color: </b> <span>@Model.Color<br></span></p>
            <p><b>Year: </b> <span>@Model.Year<br></span></p>
            <p><b>Bookign period: </b> <span>FROM: @Model.PickUpDate.ToShortDateString() TO: @Model.DropOffDate.ToShortDateString()<br></span></p>
            <p><b>Description: </b> <span class="font-italic">@Model.Description<br></span></p>

            <p><b>Best Price Guarantee: </b> <span class="">@Model.TotalPrice €<br></span></p>
            <hr />
            <p><b>Delaer Name: </b> <span class="">@Model.Dealer <br></span></p>
            <p><b>Email Address: </b> <span class="">@Model.DealerEmail <a asp-controller="Client" asp-action="Rating" asp-route-id="@Model.Id" class="offset-4 col-4 btn btn-primary mt-4">Send Email</a><br></span></p>
        </div>
    </div>
    <hr />
</div>



@section Scripts {
    <script>
        const ratingStars = [...document.getElementsByClassName("rating__star")];

        function executeRating(stars) {
            const starClassActive = "rating__star fas fa-star";
            const starClassInactive = "rating__star far fa-star";
            const starsLength = stars.length;
            let i;
            stars.map((star) => {
                star.onclick = () => {

                    i = stars.indexOf(star);

                    if (star.className === starClassInactive) {
                        for (i; i >= 0; --i) stars[i].className = starClassActive;
                    } else {
                        for (i; i < starsLength; ++i) stars[i].className = starClassInactive;
                    }
                };
            });
        }
        executeRating(ratingStars);
        $("span[data-vote]").each(function (el) {
            $(this).one('mouseup.mouseupSelect', function () {
                var value = $(this).attr("data-vote");
                var motorcycleId = $('#h_v').val();;
                var antiForgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();
                var data = { motorcycleId: motorcycleId, value: value };
                $.ajax({
                    type: "POST",
                    url: "/api/Vote",
                    data: JSON.stringify(data),
                    headers: {
                        'X-CSRF-TOKEN': antiForgeryToken
                    },
                    success: function (data) {
                        $('#averageVoteValue').html(data.averageVote.toFixed(1));
                        for (var i = 1; i <= 5; i++) {
                            var item = $("#starsForRate" + i);
                            if (i - 0.5 <= data.averageVote) {
                                item.addClass("checked");
                            }
                            else {
                                item.removeClass("checked");
                            }
                        }
                        setInterval('location.reload()', 1000);
                    },

                    contentType: 'application/json',

                });
            })
        });
    </script>
}

